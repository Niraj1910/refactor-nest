<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Election Results</title>
  <link rel="stylesheet" href="/stylesheets/style.css">
  <link rel="stylesheet" href="/stylesheets/tailwind.css">
  <!-- <link href="https://unpkg.com/mvp.css@1.12/dist/mvp.min.css" rel="stylesheet"> -->
</head>
<body class="bg-gray-100">
    
  <!-- Main Election Table -->
  <%- include('navbar.ejs') %>
  <div class="container mx-auto w-full">

    <% if (error) { %>
        <div class="text-center mx-auto mt-10">
          <h1 class="text-2xl font-bold text-red-500"><%= error %></h1>
        </div>
    <% } else { %>
  
    <div id="election-table" class="overflow-x-auto w-full mt-5">
      <!-- Table will be populated by JavaScript -->
    </div>

    <!-- Pagination Controls -->
    <div class="flex justify-center items-center mt-6 mx-auto">
      <button id="prevBtn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 gap-2 rounded mr-4 flex items-center" onclick="prevPage()">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18" />
          </svg>
        <span>Previous</span>
      </button>
      <span class="text-gray-700">Page <span id="currentPage"></span> of <span id="totalPages"></span> (<span id="totalEntries"></span> entries)</span>
      <button id="nextBtn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 gap-2 rounded ml-4 flex items-center" onclick="nextPage()">
        <span>Next</span>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
          </svg>          
      </button>
    </div>
  </div>

  <!-- Tailwind CSS Dialog Box for Delete Confirmation -->
  <div id="deleteConfirmation" class="fixed z-10 inset-0 overflow-y-auto" style="display: none;">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 transition-opacity" aria-hidden="true">
        <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
      </div>
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full" role="dialog" aria-modal="true" aria-labelledby="modal-headline">
        <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
          <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-headline">
            Delete Confirmation
          </h3>
          <div class="mt-2">
            <p class="text-sm text-gray-500">
              Are you sure you want to delete this Entry?
            </p>
          </div>
        </div>
        <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
          <button id="confirmDelete" type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm" onclick="deleteElectionConfirmed()">
            Delete
          </button>
          <button id="cancelDelete" type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm" onclick="cancelDelete()">
            Cancel
          </button>
        </div>
      </div>
    </div>
  </div>

  <h2 class="text-2xl font-bold mb-4 text-center mt-8">Party Leading Constituencies</h2>
  <div class="flex justify-center items-center w-full">
    <div id="table-container" class="overflow-x-auto bg-white shadow-md rounded-lg p-4 w-1/2 flex justify-center items-center">
      <!-- Table will be injected here -->
    </div>
  </div>


  <% } %>


  <script>
    let currentPage = 1;
    const limit = 10;
    let totalPages = 1; // Initialize totalPages to 1 to avoid undefined
    let totalEntries = 0; // Initialize totalEntries to 0
    let electionToDelete = null; // Initialize electionToDelete to null

    // Fetch election data from API
    async function fetchElectionData(page = 1, limit = 10) {
      const response = await fetch(`/api/elections?page=${page}&limit=${limit}`);
      const data = await response.json();
      renderTable(data.data, data.totalPages, data.totalItems);
      totalPages = data.totalPages; // Update totalPages with the actual value from the API
      totalEntries = data.totalItems; // Update totalEntries with the actual value from the API
      // Disable pagination buttons if there is no data
      if (data.data.length === 0) {
        document.getElementById('prevBtn').style.display = 'none';
        document.getElementById('nextBtn').style.display = 'none';
      } else {
        document.getElementById('prevBtn').style.display = 'flex';
        document.getElementById('nextBtn').style.display = 'flex';
      }
    }

    // Render the election table in HTML
    function renderTable(elections, totalPages, totalEntries) {
      const tableDiv = document.getElementById('election-table');
      tableDiv.innerHTML = `
        <table class="table-auto mx-auto w-full max-w-4xl bg-white shadow-md rounded-lg mb-8">
          <thead class="bg-gray-200">
            <tr>
              <th class="px-6 py-3 text-left text-sm font-semibold text-gray-700">State</th>
              <th class="px-6 py-3 text-left text-sm font-semibold text-gray-700">Total Seats</th>
              <th class="px-6 py-3 text-left text-sm font-semibold text-gray-700">Declared Seats</th>
              <th class="px-6 py-3 text-left text-sm font-semibold text-gray-700">Halfway Mark</th>
              <th class="px-6 py-3 text-left text-sm font-semibold text-gray-700">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white">
            ${elections.map((election, index) => `
              <tr class="border-t border-gray-300">
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${election.state}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${election.totalSeats}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${election.declaredSeats}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${election.halfWayMark}</td>
                <td class="px-6 py-4 whitespace-nowrap flex items-center">
                  <button
                    class="bg-blue-500 text-white px-4 py-2 rounded mr-2"
                    onclick="toggleDetails('${election._id}')">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
</svg>

                  </button>
                  <button
                    class="bg-green-500 text-white px-4 py-2 rounded mr-2"
                    onclick="editElection('${election._id}')">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125" />
</svg>

                  </button>
                  <button
                    class="bg-red-500 text-white px-4 py-2 rounded"
                    onclick="showDeleteConfirmation('${election._id}')">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                    </svg>
                  </button>
                </td>
              </tr>
              <!-- Collapsible Section for Party Details -->
              <tr id="details-${election._id}" class="hidden">
                <td colspan="5" class="bg-gray-100 px-6 py-2">
                  <table class="table-auto w-full">
                    <thead class="bg-gray-200">
                      <tr>
                        <th class="px-6 py-2 text-left text-sm font-semibold text-gray-700">Party</th>
                        <th class="px-6 py-2 text-left text-sm font-semibold text-gray-700">Seats Won</th>
                        <th class="px-6 py-2 text-left text-sm font-semibold text-gray-700">Leading</th>
                        <th class="px-6 py-2 text-left text-sm font-semibold text-gray-700">Party Color</th>
                      </tr>
                    </thead>
                    <tbody class="bg-white">
                      ${election.parties.map(party => `
                        <tr class="border-t border-gray-300">
                          <td class="px-6 py-4 text-sm text-gray-900">${party.name}</td>
                          <td class="px-6 py-4 text-sm text-gray-900">${party.won}</td>
                          <td class="px-6 py-4 text-sm text-gray-900">${party.leading || '-'}</td>
                          <td class="px-6 py-4 text-sm text-gray-900">${party.partyColor || '-'}</td>
                        </tr>
                      `).join('')}
                    </tbody>
                  </table>
                </td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `;
      // Update pagination buttons based on total pages and total entries
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      const currentPageSpan = document.getElementById('currentPage');
      const totalPagesSpan = document.getElementById('totalPages');
      const totalEntriesSpan = document.getElementById('totalEntries');
      currentPageSpan.textContent = currentPage;
      totalPagesSpan.textContent = totalPages;
      totalEntriesSpan.textContent = totalEntries;
      if (currentPage === 1) {
        prevBtn.style.display = 'none';
      } else {
        prevBtn.style.display = 'flex';
      }
      if (currentPage === totalPages || totalEntries < limit) {
        nextBtn.style.display = 'none';
      } else {
        nextBtn.style.display = 'flex';
      }
    }

    // Function to toggle visibility of party details
    function toggleDetails(electionId) {
      const detailsRow = document.getElementById(`details-${electionId}`);
      detailsRow.classList.toggle('hidden');
    }

    // Function to edit an election
    function editElection(electionId) {
      // Redirect to edit-election page with election ID
      window.location.href = `/edit-election/${electionId}`;
    }

    // Function to show delete confirmation dialog
    function showDeleteConfirmation(electionId) {
      electionToDelete = electionId;
      document.getElementById('deleteConfirmation').style.display = 'block';
    }

    // Function to confirm delete
    function deleteElectionConfirmed() {
      if (electionToDelete) {
        deleteElection(electionToDelete);
        electionToDelete = null;
        document.getElementById('deleteConfirmation').style.display = 'none';
      }
    }

    // Function to cancel delete
    function cancelDelete() {
      electionToDelete = null;
      document.getElementById('deleteConfirmation').style.display = 'none';
    }

    // Function to delete an election
    async function deleteElection(electionId) {
      const response = await fetch(`/api/elections/${electionId}`, {
        method: 'DELETE'
      });
      const data = await response.json();
      console.log(data.message);
      // Reload the page with the current page and limit after deletion
      fetchElectionData(currentPage, limit);
    }

    // Fetch next and previous pages
    function prevPage() {
      if (currentPage > 1) {
        currentPage--;
        fetchElectionData(currentPage, limit);
      }
    }

    function nextPage() {
      if (currentPage < totalPages) {
        currentPage++;
        fetchElectionData(currentPage, limit);
      }
    }

    // Function to create a new election
    function createElection() {
      window.location.href = '/create-election';
    }

    // Initial Fetch for Page 1
    fetchElectionData(currentPage, limit);

    async function fetchPartyData() {
      try {
        // Fetch data from the API
        const response = await fetch('/api/party/party-count');
        if (!response.ok) throw new Error('Failed to fetch data');
        
        const data = await response.json();

        // Generate table dynamically
        const tableContainer = document.getElementById('table-container');
        const table = document.createElement('table');
        table.className = 'min-w-full bg-white border border-gray-300';

        const thead = document.createElement('thead');
        thead.className = 'bg-gray-200 text-gray-700 uppercase text-sm';

        const tbody = document.createElement('tbody');

        let totalCount = 0;

        // Populate table rows
        data.forEach(party => {
          const row = document.createElement('tr');
          row.className = 'hover:bg-gray-100';
          totalCount += party.constituencyCount;

          row.innerHTML = `
            <td class="py-2 px-4 border-b">${party._id}</td>
            <td class="py-2 px-4 border-b">${party.constituencyCount}</td>
          `;
          tbody.appendChild(row);
        });

        // Create table headers
        thead.innerHTML = `
          <tr>
            <th class="py-2 px-4 border-b text-left">Party</th>
            <th class="py-2 px-4 border-b text-left">Constituency Count (${totalCount})</th>
          </tr>
        `;

        table.appendChild(thead);
        table.appendChild(tbody);
        tableContainer.appendChild(table);
      } catch (error) {
        console.error('Error fetching party data:', error);
        const errorMessage = document.createElement('p');
        errorMessage.textContent = 'Error loading data. Please try again later.';
        errorMessage.className = 'text-red-500 text-center';
        document.getElementById('table-container').appendChild(errorMessage);
      }
    }

    fetchPartyData();

  </script>

</body>
</html>
